# Plantich Project Rules

## Context & Stack
- Framework: Next.js (app/), TypeScript, pnpm, Tailwind, Sanity
- Goal: fast dev-loop, minimize AI errors, consistent structure, SEO-friendly

## Package & Tooling
- Use pnpm package manager. Remove package-lock.json if it exists
- Node: use .nvmrc (e.g. 20.14) and nvm use
- Scripts should be: pnpm dev, pnpm build, pnpm typecheck, pnpm lint, pnpm test

## File Structure
- Stick to app/, don't mix with pages/
- Alias @/* points to src/*. Use consistently in imports

## TypeScript
- Compiler should use (minimum requirements):
  - strict: true
  - noUncheckedIndexedAccess: true
  - skipLibCheck: true
  - moduleResolution: "Bundler"
  - baseUrl: "."
  - paths: { "@/*": ["./src/*"] }

## Sanity
- Single client: src/lib/sanity/client.ts
- Environment variables: SANITY_PROJECT_ID, SANITY_DATASET, SANITY_API_VERSION, SANITY_TOKEN (if write)
- Cache readings with Next cache where appropriate

## Tailwind
- content should cover: ./app/**/*.{ts,tsx}, ./components/**/*.{ts,tsx}, ./src/**/*.{ts,tsx}
- Don't use Tailwind classes in dynamic strings (to avoid missing purge)

## Quality
- ESLint + Prettier (formatOnSave)
- Prefer Zod for schema/validation
- Ask Cursor to write tests first for new logic (vitest/jest), run tests, fix errors in small steps

## Performance in Cursor
- Keep AI context small: ignore build folders and node_modules
- When suggestions become "off": Project â†’ Reindex embeddings
- Work in small tasks (one feature at a time)
- Use "Fix" in diff view before new broad prompts

## Standard reset when things break
```
git add -A && git commit -m "checkpoint"
rm -rf node_modules .next .turbo dist
pnpm install
pnpm dedupe
pnpm typecheck
pnpm build
pnpm dev
```

## Rule for AI output
- Before creating new file: list which files you plan to change
- Every major change should come with reason, risk and rollback
- Always generate minimum working version + short tests

## Ignore (for AI context in Cursor)
- Exclude: **/node_modules/**, .next/**, .turbo/**, dist/**, build/**

## DoR / Definition of Ready for tasks
- Has input: purpose, files, API keys (if needed), env keys, test cases
- If anything is missing: ask only about what blocks
